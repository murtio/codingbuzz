class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        if numRows == 1:
            return [[1]]
        elif numRows == 2:
            return [[1], [1,1]]
        else:
            ps_lst = [[1], [1,1]]
            for i in range(1,numRows-1):
                j = i-1
                new_row = [1]
                for j in range(1, len(ps_lst[i])):
                    new_row.append(ps_lst[i][j-1]+ps_lst[i][j])
                new_row.append(1)
                ps_lst.append(new_row)
            return ps_lst

# The solution seems to miss the concept of the problem; that's dynamic programming. 
# What's dynamic programming? It's a problem solving method that breakdown the problem into smaller ones and then find the final optimal solution by finding the optimal solutions for the smaller ones.
# It seems my sol is O(n2), which H's sol is also the same. I have to discuss it in the group discussion.
